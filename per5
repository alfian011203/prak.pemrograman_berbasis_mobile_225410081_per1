pertemuana ke-4 :
------------------- membuat lemonade ---------------------------- 
package com.example.lemonade

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.example.lemonade.ui.theme.LemonadeTheme
import androidx.compose.ui.Alignment
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.foundation.layout.Column
import androidx.compose.material3.Button
import androidx.compose.ui.res.stringResource
import androidx.compose.foundation.Image
import androidx.compose.ui.res.painterResource
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.Spacer
import androidx.compose.ui.unit.dp
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            LemonadeTheme {
                LemonadeApp()
            }
        }
    }
}

@Preview
@Composable
fun LemonadeApp() {
    LemonadeWithButtonAndImage(modifier = Modifier
        .fillMaxSize()
        .wrapContentSize(Alignment.Center)
    )
}

@Composable
fun LemonadeWithButtonAndImage(modifier: Modifier = Modifier) {
    var result by remember { mutableStateOf(1) }

    // Menentukan gambar dan teks tombol yang akan ditampilkan berdasarkan nilai 'result'
    val imageResource = when (result) {
        1 -> R.drawable.lemon_tree
        2 -> R.drawable.lemon_squeeze
        3 -> R.drawable.lemon_drink
        else -> R.drawable.lemon_restart
    }

    val buttonText = when (result) {
        1 -> stringResource(R.string.lemon_tree)
        2 -> stringResource(R.string.lemon_squeeze)
        3 -> stringResource(R.string.lemon_drink)
        else -> stringResource(R.string.lemon_restart)
    }

    Column(
        modifier = modifier,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // Menampilkan gambar
        Image(
            painter = painterResource(imageResource),
            contentDescription = "Current lemon state" // Deskripsi konten untuk aksesibilitas
        )
        Spacer(modifier = Modifier.height(16.dp))
        // Tombol untuk mengubah gambar dan teks
        Button(onClick = { result = if (result < 4) result + 1 else 1 }) {
            Text(buttonText) // Menggunakan buttonText yang baru
        }
    }
}

String.xml
<resources>
    <string name="Lemonade">Lemonade</string>
    <string name="lemon_tree">Tap the lemon tree to select a lemon</string>
    <string name="lemon_squeeze">Keep tapping the lemon to squeeze it</string>
    <string name="lemon_drink">Tap the lemonade to drink it</string>
    <string name="lemon_restart">Tap the empty glass to start again</string>
</resources>

sempat mengalami eror dibagian AndroidManifast.xml tetapi sudah dibenahi 
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/Lemonade"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.Lemonade"
        tools:targetApi="31">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:label="@string/Lemonade"
            android:theme="@style/Theme.Lemonade">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
------------------------------------------- prak2:tugas menghitung tip konsumen -------------------------------------------------
package com.example.tiptime

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.annotation.DrawableRes
import androidx.annotation.StringRes
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.foundation.layout.size
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.tiptime.ui.theme.TiptimeTheme
import java.text.NumberFormat

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        enableEdgeToEdge() // TODO 1: Mengaktifkan mode edge-to-edge pada aplikasi.
        super.onCreate(savedInstanceState)
        setContent {
            TiptimeTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                ) {
                    TipTimeLayout() // TODO 2: Memanggil fungsi `TipTimeLayout` sebagai konten utama.
                }
            }
        }
    }
}

@Composable
fun TipTimeLayout() {
    var amountInput by remember { mutableStateOf("") } 
    var tipInput by remember { mutableStateOf("") } 
    var roundUp by remember { mutableStateOf(false) } 

    val amount = amountInput.toDoubleOrNull() ?: 0.0 
    val tipPercent = tipInput.toDoubleOrNull() ?: 0.0
    val tip = calculateTip(amount, tipPercent, roundUp) 

    Column(
        modifier = Modifier
            .statusBarsPadding() 
            .padding(horizontal = 40.dp)
            .verticalScroll(rememberScrollState()) 
            .safeDrawingPadding(), 
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = stringResource(R.string.calculate_tip), 
            modifier = Modifier
                .padding(bottom = 16.dp, top = 40.dp)
                .align(alignment = Alignment.Start)
        )
        EditNumberField(
            label = R.string.bill_amount, 
            leadingIcon = R.drawable.money, 
            keyboardOptions = KeyboardOptions.Default.copy(
                keyboardType = KeyboardType.Number, 
                imeAction = ImeAction.Next
            ),
            value = amountInput,
            onValueChanged = { amountInput = it }, 
            modifier = Modifier.padding(bottom = 32.dp).fillMaxWidth()
        )
        EditNumberField(
            label = R.string.how_was_the_service, 
            leadingIcon = R.drawable.percent, 
            keyboardOptions = KeyboardOptions.Default.copy(
                keyboardType = KeyboardType.Number, 
                imeAction = ImeAction.Done
            ),
            value = tipInput,
            onValueChanged = { tipInput = it }, 
            modifier = Modifier.padding(bottom = 32.dp).fillMaxWidth(),
            iconSize = 32 
        )
        RoundTheTipRow(
            roundUp = roundUp, 
            onRoundUpChanged = { roundUp = it }, 
            modifier = Modifier.padding(bottom = 32.dp)
        )
        Text(
            text = stringResource(R.string.tip_amount, tip), 
            style = MaterialTheme.typography.displaySmall
        )
        Spacer(modifier = Modifier.height(150.dp)) 
    }
}

@Composable
fun EditNumberField(
    @StringRes label: Int, 
    @DrawableRes leadingIcon: Int, 
    keyboardOptions: KeyboardOptions, 
    value: String, 
    onValueChanged: (String) -> Unit, 
    modifier: Modifier = Modifier,
    iconSize: Int = 24 
) {
    TextField(
        value = value,
        singleLine = true,
        leadingIcon = {
            Icon(
                painter = painterResource(id = leadingIcon),
                contentDescription = null,
                modifier = Modifier.size(25.dp) 
            )
        },
        modifier = modifier,
        onValueChange = onValueChanged,
        label = { Text(stringResource(label)) }, 
        keyboardOptions = keyboardOptions
    )
}

@Composable
fun RoundTheTipRow(
    roundUp: Boolean, 
    onRoundUpChanged: (Boolean) -> Unit, 
    modifier: Modifier = Modifier
) {
    Row(
        modifier = modifier.fillMaxWidth(),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(text = stringResource(R.string.round_up_tip)) 
        Switch(
            modifier = Modifier
                .fillMaxWidth()
                .wrapContentWidth(Alignment.End), 
            checked = roundUp, 
            onCheckedChange = onRoundUpChanged 
        )
    }
}

private fun calculateTip(amount: Double, tipPercent: Double = 15.0, roundUp: Boolean): String {
    var tip = tipPercent / 100 * amount 
    if (roundUp) {
        tip = kotlin.math.ceil(tip) 
    }
    return NumberFormat.getCurrencyInstance().format(tip) 
}

@Preview(showBackground = true)
@Composable
fun TipTimeLayoutPreview() {
    TiptimeTheme {
        TipTimeLayout() 
    }
}
//sempat mengalami eror dibagian TiptimeTheme = solusinya adalah mengcopy paste dari file Theme.kt dibagian syntag TiptimeTheme//

String.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">Tip Time</string>
    <string name="calculate_tip">Calculate Tip</string>
    <string name="bill_amount">Bill Amount</string>
    <string name="how_was_the_service">Tip Percentage</string>
    <string name="round_up_tip">Round up tip?</string>
    <string name="tip_amount">Tip Amount: %s</string>
</resources>

----------------------------------------tugas ---------------------------------------------------------------
package com.example.artspace
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.artspace.ui.theme.ArtspaceTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            ArtspaceTheme {
                ArtSpaceScreen()
            }
        }
    }
}

@Composable
fun ArtSpaceScreen() {
    var currentArtworkIndex by remember { mutableStateOf(0) } // TODO 1: Menggunakan 'remember' untuk menyimpan index karya seni yang sedang ditampilkan
    val artworks = listOf(
        R.drawable.beacth to R.string.beach-1259549_960_720,
        R.drawable.beacth to R.string._7maldives,
    )

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(top = 20.dp) // TODO 2: Menambahkan padding atas untuk jarak dari tepi layar
            .padding(10.dp),
        horizontalAlignment = Alignment.CenterHorizontally // TODO 3: Mengatur alignmen horizontal menjadi center
    ) {
        // Menentukan tinggi dan lebar gambar
        ArtworkDisplay(
            artworkResId = artworks[currentArtworkIndex].first,
            width = 350.dp,  // TODO 4: Mengatur lebar gambar sesuai kebutuhan
            height = 550.dp  // TODO 5: Mengatur tinggi gambar sesuai kebutuhan
        )
        Spacer(modifier = Modifier.height(20.dp)) // TODO 6: Menambahkan ruang antara gambar dan judul
        ArtworkTitle(artworks[currentArtworkIndex].second) // TODO 7: Menampilkan judul karya seni berdasarkan index saat ini
        Spacer(modifier = Modifier.height(20.dp)) // TODO 8: Menambahkan ruang antara judul dan tombol navigasi
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(15.dp), // TODO 9: Menambahkan padding di sekitar baris tombol
            horizontalArrangement = Arrangement.SpaceBetween // TODO 10: Mengatur jarak antara tombol di baris
        ) {
            Button(onClick = {
                if (currentArtworkIndex > 0) currentArtworkIndex-- // TODO 11: Mengurangi index jika bukan yang pertama
                else currentArtworkIndex = artworks.size - 1 // TODO 12: Pindah ke yang terakhir jika sudah di awal
            }) {
                Text(stringResource(R.string.previous_button)) // TODO 13: Menampilkan teks untuk tombol sebelumnya
            }
            Button(onClick = {
                if (currentArtworkIndex < artworks.size - 1) currentArtworkIndex++ // TODO 14: Meningkatkan index jika bukan yang terakhir
                else currentArtworkIndex = 0 // TODO 15: Kembali ke yang pertama jika sudah di akhir
            }) {
                Text(stringResource(R.string.next_button)) // TODO 16: Menampilkan teks untuk tombol berikutnya
            }
        }
    }
}

@Composable
fun ArtworkDisplay(artworkResId: Int, width: Dp, height: Dp) {
    Card(
        modifier = Modifier
            .width(width)  // TODO 17: Mengatur lebar gambar berdasarkan parameter yang diterima
            .height(height),  // TODO 18: Mengatur tinggi gambar berdasarkan parameter yang diterima
        elevation = CardDefaults.cardElevation(defaultElevation = 50.dp) // TODO 19: Menambahkan efek elevasi pada card
    ) {
        Image(
            painter = painterResource(artworkResId),
            contentDescription = null, // TODO 20: Menyediakan deskripsi untuk aksesibilitas (null jika tidak ada)
            modifier = Modifier.fillMaxSize(), // TODO 21: Memastikan gambar mengisi seluruh ukuran card
            contentScale = ContentScale.Crop // TODO 22: Mengatur skala gambar agar sesuai dengan ukuran card
        )
    }
}

@Composable
fun ArtworkTitle(titleResId: Int) {
    Card(
        modifier = Modifier
            .width(400.dp) // TODO 23: Mengatur lebar card untuk judul
            .height(100.dp) // TODO 24: Mengatur tinggi card untuk judul
            .padding(16.dp), // TODO 25: Menambahkan padding di sekitar card
        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp) // TODO 26: Mengatur elevasi card menjadi 0
    ) {
        Box(
            modifier = Modifier.fillMaxSize(),  // TODO 27: Mengisi seluruh ukuran card dengan Box
            contentAlignment = Alignment.Center  // TODO 28: Menjaga teks agar tetap di tengah card
        ) {
            Text(
                text = stringResource(titleResId), // TODO 29: Mengambil dan menampilkan teks judul dari sumber daya
                fontSize = 20.sp, // TODO 30: Mengatur ukuran font untuk teks judul
                modifier = Modifier.padding(horizontal = 16.dp), // TODO 31: Menambahkan padding horizontal pada teks
                fontWeight = FontWeight.Bold // TODO 32: Mengatur berat font menjadi tebal
            )
        }
    }
String.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="beacth">beach-1259549_960_720</string>
    <string name="beacth">17maldives</string>
</resources>
